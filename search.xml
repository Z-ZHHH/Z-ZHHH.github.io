<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>代码中常见函数</title>
      <link href="/2021/08/26/dai-ma-zhong-chang-jian-han-shu/"/>
      <url>/2021/08/26/dai-ma-zhong-chang-jian-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="代码中常见函数"><a href="#代码中常见函数" class="headerlink" title="代码中常见函数"></a>代码中常见函数</h1><h2 id="argparse-ArgumentParser-用法解析"><a href="#argparse-ArgumentParser-用法解析" class="headerlink" title="argparse.ArgumentParser()用法解析"></a>argparse.ArgumentParser()用法解析</h2><p><a href="https://docs.python.org/zh-cn/3/library/argparse.html#argumentparser-objects">官方文档</a></p><p><a href="https://blog.csdn.net/lly_zy/article/details/97130496?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-9.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-9.control">参考1</a></p><p><a href="https://zhuanlan.zhihu.com/p/56922793">参考2</a></p><p>argparse是一个Python模块：<strong>命令行选项、参数和子命令解析器</strong>。</p><p>argparse 模块可以让人轻松编写用户友好的命令行接口。程序定义它需要的参数，然后 argparse 将弄清如何从 sys.argv 解析出那些参数。 argparse 模块还会自动生成帮助和使用手册，并在用户给程序传入无效参数时报出错误信息。</p><h3 id="一、使用流程"><a href="#一、使用流程" class="headerlink" title="一、使用流程"></a>一、使用流程</h3><h4 id="1、创建解析器"><a href="#1、创建解析器" class="headerlink" title="1、创建解析器"></a>1、创建解析器</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">'Process some integers.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 argparse的第一步是创建一个 ArgumentParser对象。</p><p>ArgumentParser对象包含将命令行解析成 Python 数据类型所需的全部信息。</p><h4 id="2、添加参数"><a href="#2、添加参数" class="headerlink" title="2、添加参数"></a>2、添加参数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'integers'</span><span class="token punctuation">,</span> metavar<span class="token operator">=</span><span class="token string">'N'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'an integer for the accumulator'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>给一个 ArgumentParser 添加程序参数信息是通过调用 add_argument() 方法完成的。</p><h4 id="3、解析参数"><a href="#3、解析参数" class="headerlink" title="3、解析参数"></a>3、解析参数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'--sum'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'-1'</span><span class="token punctuation">,</span> <span class="token string">'42'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Namespace<span class="token punctuation">(</span>accumulate<span class="token operator">=</span><span class="token operator">&lt;</span>built<span class="token operator">-</span><span class="token keyword">in</span> function <span class="token builtin">sum</span><span class="token operator">></span><span class="token punctuation">,</span> integers<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ArgumentParser 通过 parse_args()方法解析参数。</p><h3 id="二、ArgumentParser-对象"><a href="#二、ArgumentParser-对象" class="headerlink" title="二、ArgumentParser 对象"></a>二、ArgumentParser 对象</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">argparse</span><span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>prog<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> usage<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> epilog<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> parents<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> formatter_class<span class="token operator">=</span>argparse<span class="token punctuation">.</span>HelpFormatter<span class="token punctuation">,</span> prefix_chars<span class="token operator">=</span><span class="token string">'-'</span><span class="token punctuation">,</span> fromfile_prefix_chars<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> argument_default<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> conflict_handler<span class="token operator">=</span><span class="token string">'error'</span><span class="token punctuation">,</span> add_help<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> allow_abbrev<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="%E4%BB%A3%E7%A0%81%E4%B8%AD%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0%5Cimage-20210823200811695.png" alt="1"></p><h3 id="3、add-argument-方法"><a href="#3、add-argument-方法" class="headerlink" title="3、add_argument() 方法"></a>3、add_argument() 方法</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">ArgumentParser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span>name <span class="token keyword">or</span> flags<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">,</span> action<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span> nargs<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span> const<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span> default<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span> choices<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span> required<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span> metavar<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span> dest<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="%E4%BB%A3%E7%A0%81%E4%B8%AD%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0%5Cimage-20210823200926544.png" alt="2"></p><h2 id="os-getcwd-方法"><a href="#os-getcwd-方法" class="headerlink" title="os.getcwd() 方法"></a>os.getcwd() 方法</h2><p>Python 的 os 模块封装了常见的文件和目录操作。</p><p>os.getcwd() 方法用于返回当前工作目录。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span> sys<span class="token comment"># 切换到 "/var/www/html" 目录</span>os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">"/var/www/html"</span> <span class="token punctuation">)</span><span class="token comment"># 打印当前目录</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"当前工作目录 : %s"</span> <span class="token operator">%</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="os-path-join"><a href="#os-path-join" class="headerlink" title="os.path.join()"></a>os.path.join()</h2><p>os.path.join()函数：连接两个或更多的路径名组件</p><ul><li><p>如果各组件名首字母不包含’/’，则函数会自动加上</p></li><li><p>如果有一个组件是一个绝对路径，则在它之前的所有组件均会被舍弃</p></li><li><p>如果最后一个组件为空，则生成的路径以一个’/’分隔符结尾</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">print</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'111'</span><span class="token punctuation">,</span><span class="token string">'222'</span><span class="token punctuation">,</span><span class="token string">'333'</span><span class="token punctuation">)</span>  <span class="token comment">#111/222/333</span><span class="token keyword">print</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'/111'</span><span class="token punctuation">,</span><span class="token string">'222'</span><span class="token punctuation">,</span><span class="token string">'333'</span><span class="token punctuation">)</span> <span class="token comment">#/111/222/333</span><span class="token keyword">print</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'/111'</span><span class="token punctuation">,</span><span class="token string">'/222'</span><span class="token punctuation">,</span><span class="token string">'333'</span><span class="token punctuation">)</span> <span class="token comment">#/222/333</span><span class="token keyword">print</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'/111'</span><span class="token punctuation">,</span><span class="token string">'/222'</span><span class="token punctuation">,</span><span class="token string">'/333'</span><span class="token punctuation">)</span> <span class="token comment">#/333</span><span class="token keyword">print</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'111'</span><span class="token punctuation">,</span><span class="token string">'222'</span><span class="token punctuation">,</span><span class="token string">'/333'</span><span class="token punctuation">)</span> <span class="token comment">#/333</span><span class="token keyword">print</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'111'</span><span class="token punctuation">,</span><span class="token string">'/222'</span><span class="token punctuation">,</span><span class="token string">'/333'</span><span class="token punctuation">)</span> <span class="token comment">#/333</span><span class="token keyword">print</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'/111'</span><span class="token punctuation">,</span><span class="token string">'/222'</span><span class="token punctuation">,</span><span class="token string">'/333'</span><span class="token punctuation">)</span> <span class="token comment">#/333</span><span class="token keyword">print</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'111/'</span><span class="token punctuation">,</span><span class="token string">'222'</span><span class="token punctuation">,</span><span class="token string">'333'</span><span class="token punctuation">)</span> <span class="token comment">#111/222/333</span><span class="token keyword">print</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'111/'</span><span class="token punctuation">,</span><span class="token string">'222/'</span><span class="token punctuation">,</span><span class="token string">'333'</span><span class="token punctuation">)</span> <span class="token comment">#111/222/333</span><span class="token keyword">print</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'111/'</span><span class="token punctuation">,</span><span class="token string">'222/'</span><span class="token punctuation">,</span><span class="token string">'333/'</span><span class="token punctuation">)</span> <span class="token comment">#111/222/333/</span><span class="token keyword">print</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'111'</span><span class="token punctuation">,</span><span class="token string">'222'</span><span class="token punctuation">,</span><span class="token string">'333/'</span><span class="token punctuation">)</span> <span class="token comment">#111/222/333/</span><span class="token keyword">print</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'111'</span><span class="token punctuation">,</span><span class="token string">'222/'</span><span class="token punctuation">,</span><span class="token string">'333/'</span><span class="token punctuation">)</span> <span class="token comment">#111/222/333/</span><span class="token keyword">print</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'111/'</span><span class="token punctuation">,</span><span class="token string">'222/'</span><span class="token punctuation">,</span><span class="token string">'333/'</span><span class="token punctuation">)</span> <span class="token comment">#111/222/333/</span><span class="token keyword">print</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'111'</span><span class="token punctuation">,</span><span class="token string">'222'</span><span class="token punctuation">,</span><span class="token string">'./333'</span><span class="token punctuation">)</span> <span class="token comment">#111/222/./333</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="os-path-exists"><a href="#os-path-exists" class="headerlink" title="os.path.exists()"></a>os.path.exists()</h2><p>os.path模块主要用于文件的属性获取,exists是“存在”的意思，所以顾名思义，os.path.exists()就是判断括号里的文件是否存在的意思，括号内的可以是文件路径。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># user.py为存在于当前目录的一个文件</span><span class="token keyword">import</span> ospath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'user.py'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token comment"># 输出</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="pickle模块"><a href="#pickle模块" class="headerlink" title="pickle模块"></a>pickle模块</h2><p>在机器学习中，我们常常需要把训练好的模型存储起来，这样在进行决策时直接将模型读出，而不需要重新训练模型，这样就大大节约了时间。Python提供的pickle模块就很好地解决了这个问题，它可以序列化对象并保存到磁盘中，并在需要的时候读取出来，任何对象都可以执行序列化操作。</p><p>Pickle模块中最常用的函数为：</p><p>（1）pickle.dump(obj, file, [,protocol])</p><ul><li><p>函数的功能：将obj对象序列化存入已经打开的file中。</p></li><li><p>参数讲解：</p><ul><li><p>obj：想要序列化的obj对象。</p></li><li><p>file:文件名称。</p></li><li><p>protocol：序列化使用的协议。如果该项省略，则默认为0。如果为负值或HIGHEST_PROTOCOL，则使用最高的协议版本。</p></li></ul></li></ul><p>（2）pickle.load(file)</p><p>函数的功能：将file中的对象序列化读出。<br>file：文件名称。<br>（3）pickle.dumps(obj[, protocol])<br>函数的功能：将obj对象序列化为string形式，而不是存入文件中。<br>参数讲解：</p><ul><li>obj：想要序列化的obj对象。</li><li>protocal：如果该项省略，则默认为0。如果为负值或HIGHEST_PROTOCOL，则使用最高的协议版本。</li></ul><p>（4）pickle.loads(string)</p><p>函数的功能：从string中读出序列化前的obj对象。<br>string：文件名称。<br>     【注】 dump() 与 load() 相比 dumps() 和 loads() 还有另一种能力：dump()函数能一个接着一个地将几个对象序列化存储到同一个文件中，随后调用load()来以同样的顺序反序列化读出这些对象。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickledataList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'yes'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'yes'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'no'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'no'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'no'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>dataDic <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'c'</span><span class="token punctuation">:</span><span class="token string">'yes'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">:</span><span class="token string">'no'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">#使用dump()将数据序列化到文件中</span>fw <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'dataFile.txt'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token comment"># Pickle the list using the highest protocol available.</span>pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>dataList<span class="token punctuation">,</span> fw<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># Pickle dictionary using protocol 0.</span>pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>dataDic<span class="token punctuation">,</span> fw<span class="token punctuation">)</span>fw<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#使用load()将数据从文件中序列化读出</span>fr <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'dataFile.txt'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span>data1 <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span>data2 <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span>fr<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#使用dumps()和loads()举例</span>p <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>dataList<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">)</span>p <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>dataDic<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ResNet代码详解</title>
      <link href="/2021/08/25/resnet-dai-ma-xiang-jie/"/>
      <url>/2021/08/25/resnet-dai-ma-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/pytorch/vision/blob/master/torchvision/models/resnet.py">官方代码链接</a></p><p><a href="http://c.biancheng.net/view/2401.html"><code>__all__</code>变量</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> math<span class="token keyword">import</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>model_zoo <span class="token keyword">as</span> model_zoo<span class="token comment"># 这个文件内包括6中不同的网络架构</span><span class="token comment">#__all__ 变量，该变量的值是一个列表，存储的是当前模块中一些成员（变量、函数或者类）的名称。通过在模块文件</span><span class="token comment">#中设置 __all__ 变量，当其它文件以“from 模块名 import *”的形式导入该模块时，该文件中只能使用 __all__ </span><span class="token comment">#列表中指定的成员。</span>__all__ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ResNet'</span><span class="token punctuation">,</span> <span class="token string">'resnet18'</span><span class="token punctuation">,</span> <span class="token string">'resnet34'</span><span class="token punctuation">,</span> <span class="token string">'resnet50'</span><span class="token punctuation">,</span> <span class="token string">'resnet101'</span><span class="token punctuation">,</span>           <span class="token string">'resnet152'</span><span class="token punctuation">]</span><span class="token comment"># 每一种架构下都有训练好的可以用的参数文件</span>model_urls <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'resnet18'</span><span class="token punctuation">:</span> <span class="token string">'https://s3.amazonaws.com/pytorch/models/resnet18-5c106cde.pth'</span><span class="token punctuation">,</span>    <span class="token string">'resnet34'</span><span class="token punctuation">:</span> <span class="token string">'https://s3.amazonaws.com/pytorch/models/resnet34-333f7ec4.pth'</span><span class="token punctuation">,</span>    <span class="token string">'resnet50'</span><span class="token punctuation">:</span> <span class="token string">'https://s3.amazonaws.com/pytorch/models/resnet50-19c8e357.pth'</span><span class="token punctuation">,</span>    <span class="token string">'resnet101'</span><span class="token punctuation">:</span> <span class="token string">'https://s3.amazonaws.com/pytorch/models/resnet101-5d3b4d8f.pth'</span><span class="token punctuation">,</span>    <span class="token string">'resnet152'</span><span class="token punctuation">:</span> <span class="token string">'https://s3.amazonaws.com/pytorch/models/resnet152-b121ed2d.pth'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment"># 常见的3x3卷积</span><span class="token keyword">def</span> <span class="token function">conv3x3</span><span class="token punctuation">(</span>in_planes<span class="token punctuation">,</span> out_planes<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token string">"3x3 convolution with padding"</span>    <span class="token keyword">return</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_planes<span class="token punctuation">,</span> out_planes<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span>stride<span class="token punctuation">,</span>                     padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment"># 这是残差网络中的basicblock，实现的功能如下方解释：</span><span class="token keyword">class</span> <span class="token class-name">BasicBlock</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    expansion <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> inplanes<span class="token punctuation">,</span> planes<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> downsample<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># inplanes代表输入通道数，planes代表输出通道数。</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>BasicBlock<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> conv3x3<span class="token punctuation">(</span>inplanes<span class="token punctuation">,</span> planes<span class="token punctuation">,</span> stride<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>planes<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> conv3x3<span class="token punctuation">(</span>planes<span class="token punctuation">,</span> planes<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>planes<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>downsample <span class="token operator">=</span> downsample        self<span class="token punctuation">.</span>stride <span class="token operator">=</span> stride    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        residual <span class="token operator">=</span> x        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>bn1<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>bn2<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>downsample <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            residual <span class="token operator">=</span> self<span class="token punctuation">.</span>downsample<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        out <span class="token operator">+=</span> residual        out <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        <span class="token keyword">return</span> out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://pic1.zhimg.com/v2-0892e5423616c30f69ded61111b111c0_b.jpg" alt="img"></p><p>1.BasicBlock类中的init()函数是先定义网络架构，forward()的函数是前向传播，实现的功能就是残差块，如下图所示：</p><p><img src="https://pic3.zhimg.com/v2-7a091e06e72c0e06a1c77209bfd5c47e_b.jpg" alt="img"></p><p>2.Bottleneck类是另一种blcok类型，同上，init()函数是预定义网络架构，forward函数是进行前向传播。该block中有三个卷积，分别是1x1,3x3,1x1，分别完成的功能就是维度压缩，卷积，恢复维度！故bottleneck实现的功能就是对通道数进行压缩，再放大。注意：这里的plane不再是输出的通道数，输出通道数应该就是plane * expansion，即4*plane。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Bottleneck</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    expansion <span class="token operator">=</span> <span class="token number">4</span>      <span class="token comment"># 输出通道数的倍乘</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> inplanes<span class="token punctuation">,</span> planes<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> downsample<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Bottleneck<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>inplanes<span class="token punctuation">,</span> planes<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>planes<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>planes<span class="token punctuation">,</span> planes<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span>stride<span class="token punctuation">,</span>                               padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>planes<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>planes<span class="token punctuation">,</span> planes <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>planes <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>downsample <span class="token operator">=</span> downsample        self<span class="token punctuation">.</span>stride <span class="token operator">=</span> stride    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        residual <span class="token operator">=</span> x        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>bn1<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>bn2<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv3<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>bn3<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>downsample <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            residual <span class="token operator">=</span> self<span class="token punctuation">.</span>downsample<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        out <span class="token operator">+=</span> residual        out <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        <span class="token keyword">return</span> out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://pic1.zhimg.com/v2-300262130b8c1b7081885440cdce9754_b.jpg" alt="img"></p><p>这两个class讲清楚的话，后面的网络主体架构就还蛮好理解的了，6中架构之间的不同在于basicblock和bottlenek之间的不同以及block的输入参数的不同。因为ResNet一般有4个stack，每一个stack里面都是block的堆叠，所以[3, 4, 6, 3]就是每一个stack里面堆叠block的个数，故而造就了不同深度的ResNet。</p><p><img src="https://pic1.zhimg.com/v2-1dfd4022d4be28392ff44c49d6b4ed94_b.jpg" alt="img"></p><p>resnet18： ResNet(BasicBlock, [2, 2, 2, 2])</p><p>resnet34： ResNet(BasicBlock, [3, 4, 6, 3])</p><p>resnet50：ResNet(Bottleneck, [3, 4, 6, 3])</p><p>resnet101:ResNet(Bottleneck, [3, 4, 23, 3])</p><p>resnet152:ResNet(Bottleneck, [3, 8, 36, 3])</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">resnet18</span><span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Constructs a ResNet-18 model.    Args:        pretrained (bool): If True, returns a model pre-trained on ImageNet    """</span>    model <span class="token operator">=</span> ResNet<span class="token punctuation">(</span>BasicBlock<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> pretrained<span class="token punctuation">:</span>        model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>model_zoo<span class="token punctuation">.</span>load_url<span class="token punctuation">(</span>model_urls<span class="token punctuation">[</span><span class="token string">'resnet18'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> model<span class="token keyword">def</span> <span class="token function">resnet34</span><span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Constructs a ResNet-34 model.    Args:        pretrained (bool): If True, returns a model pre-trained on ImageNet    """</span>    model <span class="token operator">=</span> ResNet<span class="token punctuation">(</span>BasicBlock<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> pretrained<span class="token punctuation">:</span>        model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>model_zoo<span class="token punctuation">.</span>load_url<span class="token punctuation">(</span>model_urls<span class="token punctuation">[</span><span class="token string">'resnet34'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> model<span class="token keyword">def</span> <span class="token function">resnet50</span><span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Constructs a ResNet-50 model.    Args:        pretrained (bool): If True, returns a model pre-trained on ImageNet    """</span>    model <span class="token operator">=</span> ResNet<span class="token punctuation">(</span>Bottleneck<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> pretrained<span class="token punctuation">:</span>        model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>model_zoo<span class="token punctuation">.</span>load_url<span class="token punctuation">(</span>model_urls<span class="token punctuation">[</span><span class="token string">'resnet50'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> model<span class="token keyword">def</span> <span class="token function">resnet101</span><span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Constructs a ResNet-101 model.    Args:        pretrained (bool): If True, returns a model pre-trained on ImageNet    """</span>    model <span class="token operator">=</span> ResNet<span class="token punctuation">(</span>Bottleneck<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> pretrained<span class="token punctuation">:</span>        model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>model_zoo<span class="token punctuation">.</span>load_url<span class="token punctuation">(</span>model_urls<span class="token punctuation">[</span><span class="token string">'resnet101'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> model<span class="token keyword">def</span> <span class="token function">resnet152</span><span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Constructs a ResNet-152 model.    Args:        pretrained (bool): If True, returns a model pre-trained on ImageNet    """</span>    model <span class="token operator">=</span> ResNet<span class="token punctuation">(</span>Bottleneck<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> pretrained<span class="token punctuation">:</span>        model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>model_zoo<span class="token punctuation">.</span>load_url<span class="token punctuation">(</span>model_urls<span class="token punctuation">[</span><span class="token string">'resnet152'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> model<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后的ResNet类其实可以根据列表大小来构建不同深度的resnet网络架构。resnet一共有5个阶段，第一阶段是一个7x7的卷积，stride=2，然后再经过池化层，得到的特征图大小变为原图的1/4。_make_layer()函数用来产生4个layer，可以根据输入的layers列表来创建网络。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ResNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> block<span class="token punctuation">,</span> layers<span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># layers=参数列表 block选择不同的类</span>        self<span class="token punctuation">.</span>inplanes <span class="token operator">=</span> <span class="token number">64</span>         <span class="token builtin">super</span><span class="token punctuation">(</span>ResNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>maxpool <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layer1 <span class="token operator">=</span> self<span class="token punctuation">.</span>_make_layer<span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> layers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layer2 <span class="token operator">=</span> self<span class="token punctuation">.</span>_make_layer<span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> layers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layer3 <span class="token operator">=</span> self<span class="token punctuation">.</span>_make_layer<span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> layers<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layer4 <span class="token operator">=</span> self<span class="token punctuation">.</span>_make_layer<span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> layers<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>avgpool <span class="token operator">=</span> nn<span class="token punctuation">.</span>AvgPool2d<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span> <span class="token operator">*</span> block<span class="token punctuation">.</span>expansion<span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span>        <span class="token keyword">for</span> m <span class="token keyword">in</span> self<span class="token punctuation">.</span>modules<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">)</span><span class="token punctuation">:</span>                n <span class="token operator">=</span> m<span class="token punctuation">.</span>kernel_size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> m<span class="token punctuation">.</span>kernel_size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> m<span class="token punctuation">.</span>out_channels                m<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>data<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">.</span> <span class="token operator">/</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">)</span><span class="token punctuation">:</span>                m<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>data<span class="token punctuation">.</span>fill_<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                m<span class="token punctuation">.</span>bias<span class="token punctuation">.</span>data<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_make_layer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> block<span class="token punctuation">,</span> planes<span class="token punctuation">,</span> blocks<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        downsample <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token keyword">if</span> stride <span class="token operator">!=</span> <span class="token number">1</span> <span class="token keyword">or</span> self<span class="token punctuation">.</span>inplanes <span class="token operator">!=</span> planes <span class="token operator">*</span> block<span class="token punctuation">.</span>expansion<span class="token punctuation">:</span>            downsample <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>                nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>self<span class="token punctuation">.</span>inplanes<span class="token punctuation">,</span> planes <span class="token operator">*</span> block<span class="token punctuation">.</span>expansion<span class="token punctuation">,</span>                          kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token operator">=</span>stride<span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>planes <span class="token operator">*</span> block<span class="token punctuation">.</span>expansion<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>        layers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        layers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>block<span class="token punctuation">(</span>self<span class="token punctuation">.</span>inplanes<span class="token punctuation">,</span> planes<span class="token punctuation">,</span> stride<span class="token punctuation">,</span> downsample<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 每个blocks的第一个residual结构保存在layers列表中。</span>        self<span class="token punctuation">.</span>inplanes <span class="token operator">=</span> planes <span class="token operator">*</span> block<span class="token punctuation">.</span>expansion        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> blocks<span class="token punctuation">)</span><span class="token punctuation">:</span>            layers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>block<span class="token punctuation">(</span>self<span class="token punctuation">.</span>inplanes<span class="token punctuation">,</span> planes<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">#该部分是将每个blocks的剩下residual 结构保存在layers列表中，这样就完成了一个blocks的构造。</span>        <span class="token keyword">return</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span>layers<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>bn1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>maxpool<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>layer1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>layer2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>layer3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>layer4<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>avgpool<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment"># 将输出结果展成一行</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面我将展示resnet18的部分结构：</p><p><img src="https://pic2.zhimg.com/v2-5900b09cfa6d4acd01ed7cdd4836d9cd_b.jpg" alt="img"></p><p>如上图所示：先经过一个7x7的卷积，然后送入（layer1）,里面包括两个basicblock，每一个basicblock里面都是两个3x3的卷积，下面再接相同类型的layer2,3,4。之后再接一个平均池化层和全连接层就完成了resnet-18的整个架构。</p><p><img src="https://pic3.zhimg.com/v2-e16eb83c8aaad7051d9a8772db697a22_b.png" alt="img"></p><p>转载自链接：<a href="https://zhuanlan.zhihu.com/p/77899090">https://zhuanlan.zhihu.com/p/77899090</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pytorch </tag>
            
            <tag> ResNet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一</title>
      <link href="/2021/08/19/di-yi/"/>
      <url>/2021/08/19/di-yi/</url>
      
        <content type="html"><![CDATA[<p>123</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World！</title>
      <link href="/2021/08/19/hello-world/"/>
      <url>/2021/08/19/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="人生不应该是浑浑噩噩的"><a href="#人生不应该是浑浑噩噩的" class="headerlink" title="人生不应该是浑浑噩噩的"></a>人生不应该是浑浑噩噩的</h2><p>总是在羡慕别人的光辉和荣耀，却战胜不了思维的惰性，一碰到难点就想放弃，不能踏踏实实把一件事做完做好，何成大气？</p><h4 id="2021-8-26—-2021-10-20目标："><a href="#2021-8-26—-2021-10-20目标：" class="headerlink" title="2021/8/26—-2021/10/20目标："></a>2021/8/26—-2021/10/20目标：</h4><ul><li>机器学习西瓜书</li><li>数据结构</li><li>林轩田机器学习</li><li></li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
